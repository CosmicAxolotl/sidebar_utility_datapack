

execute store result score if ca.sidebar if data storage ca: args.contents.lines[1][0].text
execute if score if ca.sidebar matches 0 run execute store success score if ca.sidebar run tellraw @s [[{"text":"[SU]: ","color":"#FFCA2A"}],{"text":"ARGUMENT ERROR: The second element of Lines (list) argument is either empty, non-existent or malformed.","color":"#FFCA2A"}," ",[{"text":"Hover here to see the function arguments structure.","underlined":true,"color":"yellow","hoverEvent":{"action":"show_text","contents":["",{"text":"#","color":"dark_gray"},{"text":" Arguments: ","color":"yellow","bold":true},{"text":"{","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     id","color":"aqua"},{"text":": "},{"text":"\"","color":"green"},{"text":"<identifier>","color":"dark_green"},{"text":"\"","color":"green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"     contents","color":"aqua"},{"text":": "},{"text":"{","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        lines","color":"aqua"},{"text":": "},{"text":"[","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           [","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<prefix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<suffix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           ]","color":"gold"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"           <every new list states a new line using the previous structure; lines are made from to bottom, up to 16 lines>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        ]","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     }","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"*","color":"green"},{"text":"]:","color":"gold"},{"text":" Use single quotes (') to avoid issues with escaping.","color":"gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"**","color":"green"},{"text":"]:","color":"gold"},{"text":" Optional; 1b if needs JSON component solving & 0b if doesn't need JSON component solving. Omission default to 0b.","color":"gray"},{"text":"\n "}]}}]]
execute if score if ca.sidebar matches 0 run

execute unless score entries.count ca.sidebar matches 3.. run tellraw @s [{"text":" ╞══ Found 2 lines...","color":"dark_gray"}]
execute unless score entries.count ca.sidebar matches 3.. run return 1

execute store result score if ca.sidebar if data storage ca: args.contents.lines[2][0].text
execute if score if ca.sidebar matches 0 run execute store success score if ca.sidebar run tellraw @s [[{"text":"[SU]: ","color":"#FFCA2A"}],{"text":"ARGUMENT ERROR: The third element of Lines (list) argument is either empty, non-existent or malformed.","color":"#FFCA2A"}," ",[{"text":"Hover here to see the function arguments structure.","underlined":true,"color":"yellow","hoverEvent":{"action":"show_text","contents":["",{"text":"#","color":"dark_gray"},{"text":" Arguments: ","color":"yellow","bold":true},{"text":"{","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     id","color":"aqua"},{"text":": "},{"text":"\"","color":"green"},{"text":"<identifier>","color":"dark_green"},{"text":"\"","color":"green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"     contents","color":"aqua"},{"text":": "},{"text":"{","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        lines","color":"aqua"},{"text":": "},{"text":"[","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           [","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<prefix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<suffix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           ]","color":"gold"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"           <every new list states a new line using the previous structure; lines are made from to bottom, up to 16 lines>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        ]","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     }","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"*","color":"green"},{"text":"]:","color":"gold"},{"text":" Use single quotes (') to avoid issues with escaping.","color":"gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"**","color":"green"},{"text":"]:","color":"gold"},{"text":" Optional; 1b if needs JSON component solving & 0b if doesn't need JSON component solving. Omission default to 0b.","color":"gray"},{"text":"\n "}]}}]]
execute if score if ca.sidebar matches 0 run

execute unless score entries.count ca.sidebar matches 4.. run tellraw @s [{"text":" ╞══ Found 3 lines...","color":"dark_gray"}]
execute unless score entries.count ca.sidebar matches 4.. run return 1

execute store result score if ca.sidebar if data storage ca: args.contents.lines[3][0].text
execute if score if ca.sidebar matches 0 run execute store success score if ca.sidebar run tellraw @s [[{"text":"[SU]: ","color":"#FFCA2A"}],{"text":"ARGUMENT ERROR: The forth element of Lines (list) argument is either empty, non-existent or malformed.","color":"#FFCA2A"}," ",[{"text":"Hover here to see the function arguments structure.","underlined":true,"color":"yellow","hoverEvent":{"action":"show_text","contents":["",{"text":"#","color":"dark_gray"},{"text":" Arguments: ","color":"yellow","bold":true},{"text":"{","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     id","color":"aqua"},{"text":": "},{"text":"\"","color":"green"},{"text":"<identifier>","color":"dark_green"},{"text":"\"","color":"green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"     contents","color":"aqua"},{"text":": "},{"text":"{","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        lines","color":"aqua"},{"text":": "},{"text":"[","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           [","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<prefix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<suffix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           ]","color":"gold"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"           <every new list states a new line using the previous structure; lines are made from to bottom, up to 16 lines>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        ]","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     }","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"*","color":"green"},{"text":"]:","color":"gold"},{"text":" Use single quotes (') to avoid issues with escaping.","color":"gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"**","color":"green"},{"text":"]:","color":"gold"},{"text":" Optional; 1b if needs JSON component solving & 0b if doesn't need JSON component solving. Omission default to 0b.","color":"gray"},{"text":"\n "}]}}]]
execute if score if ca.sidebar matches 0 run

execute unless score entries.count ca.sidebar matches 5.. run tellraw @s [{"text":" ╞══ Found 4 lines...","color":"dark_gray"}]
execute unless score entries.count ca.sidebar matches 5.. run return 1

execute store result score if ca.sidebar if data storage ca: args.contents.lines[4][0].text
execute if score if ca.sidebar matches 0 run execute store success score if ca.sidebar run tellraw @s [[{"text":"[SU]: ","color":"#FFCA2A"}],{"text":"ARGUMENT ERROR: The fifth element of Lines (list) argument is either empty, non-existent or malformed.","color":"#FFCA2A"}," ",[{"text":"Hover here to see the function arguments structure.","underlined":true,"color":"yellow","hoverEvent":{"action":"show_text","contents":["",{"text":"#","color":"dark_gray"},{"text":" Arguments: ","color":"yellow","bold":true},{"text":"{","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     id","color":"aqua"},{"text":": "},{"text":"\"","color":"green"},{"text":"<identifier>","color":"dark_green"},{"text":"\"","color":"green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"     contents","color":"aqua"},{"text":": "},{"text":"{","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        lines","color":"aqua"},{"text":": "},{"text":"[","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           [","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<prefix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<suffix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           ]","color":"gold"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"           <every new list states a new line using the previous structure; lines are made from to bottom, up to 16 lines>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        ]","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     }","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"*","color":"green"},{"text":"]:","color":"gold"},{"text":" Use single quotes (') to avoid issues with escaping.","color":"gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"**","color":"green"},{"text":"]:","color":"gold"},{"text":" Optional; 1b if needs JSON component solving & 0b if doesn't need JSON component solving. Omission default to 0b.","color":"gray"},{"text":"\n "}]}}]]
execute if score if ca.sidebar matches 0 run

execute unless score entries.count ca.sidebar matches 6.. run tellraw @s [{"text":" ╞══ Found 5 lines...","color":"dark_gray"}]
execute unless score entries.count ca.sidebar matches 6.. run return 1

execute store result score if ca.sidebar if data storage ca: args.contents.lines[5][0].text
execute if score if ca.sidebar matches 0 run execute store success score if ca.sidebar run tellraw @s [[{"text":"[SU]: ","color":"#FFCA2A"}],{"text":"ARGUMENT ERROR: The sixth element of Lines (list) argument is either empty, non-existent or malformed.","color":"#FFCA2A"}," ",[{"text":"Hover here to see the function arguments structure.","underlined":true,"color":"yellow","hoverEvent":{"action":"show_text","contents":["",{"text":"#","color":"dark_gray"},{"text":" Arguments: ","color":"yellow","bold":true},{"text":"{","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     id","color":"aqua"},{"text":": "},{"text":"\"","color":"green"},{"text":"<identifier>","color":"dark_green"},{"text":"\"","color":"green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"     contents","color":"aqua"},{"text":": "},{"text":"{","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        lines","color":"aqua"},{"text":": "},{"text":"[","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           [","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<prefix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<suffix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           ]","color":"gold"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"           <every new list states a new line using the previous structure; lines are made from to bottom, up to 16 lines>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        ]","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     }","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"*","color":"green"},{"text":"]:","color":"gold"},{"text":" Use single quotes (') to avoid issues with escaping.","color":"gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"**","color":"green"},{"text":"]:","color":"gold"},{"text":" Optional; 1b if needs JSON component solving & 0b if doesn't need JSON component solving. Omission default to 0b.","color":"gray"},{"text":"\n "}]}}]]
execute if score if ca.sidebar matches 0 run

execute unless score entries.count ca.sidebar matches 7.. run tellraw @s [{"text":" ╞══ Found 6 lines...","color":"dark_gray"}]
execute unless score entries.count ca.sidebar matches 7.. run return 1

execute store result score if ca.sidebar if data storage ca: args.contents.lines[6][0].text
execute if score if ca.sidebar matches 0 run execute store success score if ca.sidebar run tellraw @s [[{"text":"[SU]: ","color":"#FFCA2A"}],{"text":"ARGUMENT ERROR: The seventh element of Lines (list) argument is either empty, non-existent or malformed.","color":"#FFCA2A"}," ",[{"text":"Hover here to see the function arguments structure.","underlined":true,"color":"yellow","hoverEvent":{"action":"show_text","contents":["",{"text":"#","color":"dark_gray"},{"text":" Arguments: ","color":"yellow","bold":true},{"text":"{","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     id","color":"aqua"},{"text":": "},{"text":"\"","color":"green"},{"text":"<identifier>","color":"dark_green"},{"text":"\"","color":"green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"     contents","color":"aqua"},{"text":": "},{"text":"{","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        lines","color":"aqua"},{"text":": "},{"text":"[","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           [","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<prefix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<suffix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           ]","color":"gold"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"           <every new list states a new line using the previous structure; lines are made from to bottom, up to 16 lines>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        ]","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     }","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"*","color":"green"},{"text":"]:","color":"gold"},{"text":" Use single quotes (') to avoid issues with escaping.","color":"gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"**","color":"green"},{"text":"]:","color":"gold"},{"text":" Optional; 1b if needs JSON component solving & 0b if doesn't need JSON component solving. Omission default to 0b.","color":"gray"},{"text":"\n "}]}}]]
execute if score if ca.sidebar matches 0 run

execute unless score entries.count ca.sidebar matches 8.. run tellraw @s [{"text":" ╞══ Found 7 lines...","color":"dark_gray"}]
execute unless score entries.count ca.sidebar matches 8.. run return 1

execute store result score if ca.sidebar if data storage ca: args.contents.lines[7][0].text
execute if score if ca.sidebar matches 0 run execute store success score if ca.sidebar run tellraw @s [[{"text":"[SU]: ","color":"#FFCA2A"}],{"text":"ARGUMENT ERROR: The eighth element of Lines (list) argument is either empty, non-existent or malformed.","color":"#FFCA2A"}," ",[{"text":"Hover here to see the function arguments structure.","underlined":true,"color":"yellow","hoverEvent":{"action":"show_text","contents":["",{"text":"#","color":"dark_gray"},{"text":" Arguments: ","color":"yellow","bold":true},{"text":"{","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     id","color":"aqua"},{"text":": "},{"text":"\"","color":"green"},{"text":"<identifier>","color":"dark_green"},{"text":"\"","color":"green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"     contents","color":"aqua"},{"text":": "},{"text":"{","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        lines","color":"aqua"},{"text":": "},{"text":"[","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           [","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<prefix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<suffix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           ]","color":"gold"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"           <every new list states a new line using the previous structure; lines are made from to bottom, up to 16 lines>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        ]","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     }","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"*","color":"green"},{"text":"]:","color":"gold"},{"text":" Use single quotes (') to avoid issues with escaping.","color":"gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"**","color":"green"},{"text":"]:","color":"gold"},{"text":" Optional; 1b if needs JSON component solving & 0b if doesn't need JSON component solving. Omission default to 0b.","color":"gray"},{"text":"\n "}]}}]]
execute if score if ca.sidebar matches 0 run

execute unless score entries.count ca.sidebar matches 9.. run tellraw @s [{"text":" ╞══ Found 8 lines...","color":"dark_gray"}]
execute unless score entries.count ca.sidebar matches 9.. run return 1

execute store result score if ca.sidebar if data storage ca: args.contents.lines[8][0].text
execute if score if ca.sidebar matches 0 run execute store success score if ca.sidebar run tellraw @s [[{"text":"[SU]: ","color":"#FFCA2A"}],{"text":"ARGUMENT ERROR: The ninth element of Lines (list) argument is either empty, non-existent or malformed.","color":"#FFCA2A"}," ",[{"text":"Hover here to see the function arguments structure.","underlined":true,"color":"yellow","hoverEvent":{"action":"show_text","contents":["",{"text":"#","color":"dark_gray"},{"text":" Arguments: ","color":"yellow","bold":true},{"text":"{","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     id","color":"aqua"},{"text":": "},{"text":"\"","color":"green"},{"text":"<identifier>","color":"dark_green"},{"text":"\"","color":"green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"     contents","color":"aqua"},{"text":": "},{"text":"{","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        lines","color":"aqua"},{"text":": "},{"text":"[","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           [","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<prefix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<suffix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           ]","color":"gold"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"           <every new list states a new line using the previous structure; lines are made from to bottom, up to 16 lines>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        ]","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     }","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"*","color":"green"},{"text":"]:","color":"gold"},{"text":" Use single quotes (') to avoid issues with escaping.","color":"gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"**","color":"green"},{"text":"]:","color":"gold"},{"text":" Optional; 1b if needs JSON component solving & 0b if doesn't need JSON component solving. Omission default to 0b.","color":"gray"},{"text":"\n "}]}}]]
execute if score if ca.sidebar matches 0 run

execute unless score entries.count ca.sidebar matches 10.. run tellraw @s [{"text":" ╞══ Found 9 lines...","color":"dark_gray"}]
execute unless score entries.count ca.sidebar matches 10.. run return 1

execute store result score if ca.sidebar if data storage ca: args.contents.lines[9][0].text
execute if score if ca.sidebar matches 0 run execute store success score if ca.sidebar run tellraw @s [[{"text":"[SU]: ","color":"#FFCA2A"}],{"text":"ARGUMENT ERROR: The tenth element of Lines (list) argument is either empty, non-existent or malformed.","color":"#FFCA2A"}," ",[{"text":"Hover here to see the function arguments structure.","underlined":true,"color":"yellow","hoverEvent":{"action":"show_text","contents":["",{"text":"#","color":"dark_gray"},{"text":" Arguments: ","color":"yellow","bold":true},{"text":"{","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     id","color":"aqua"},{"text":": "},{"text":"\"","color":"green"},{"text":"<identifier>","color":"dark_green"},{"text":"\"","color":"green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"     contents","color":"aqua"},{"text":": "},{"text":"{","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        lines","color":"aqua"},{"text":": "},{"text":"[","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           [","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<prefix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<suffix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           ]","color":"gold"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"           <every new list states a new line using the previous structure; lines are made from to bottom, up to 16 lines>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        ]","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     }","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"*","color":"green"},{"text":"]:","color":"gold"},{"text":" Use single quotes (') to avoid issues with escaping.","color":"gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"**","color":"green"},{"text":"]:","color":"gold"},{"text":" Optional; 1b if needs JSON component solving & 0b if doesn't need JSON component solving. Omission default to 0b.","color":"gray"},{"text":"\n "}]}}]]
execute if score if ca.sidebar matches 0 run

execute unless score entries.count ca.sidebar matches 11.. run tellraw @s [{"text":" ╞══ Found 10 lines...","color":"dark_gray"}]
execute unless score entries.count ca.sidebar matches 11.. run return 1

execute store result score if ca.sidebar if data storage ca: args.contents.lines[10][0].text
execute if score if ca.sidebar matches 0 run execute store success score if ca.sidebar run tellraw @s [[{"text":"[SU]: ","color":"#FFCA2A"}],{"text":"ARGUMENT ERROR: The eleventh element of Lines (list) argument is either empty, non-existent or malformed.","color":"#FFCA2A"}," ",[{"text":"Hover here to see the function arguments structure.","underlined":true,"color":"yellow","hoverEvent":{"action":"show_text","contents":["",{"text":"#","color":"dark_gray"},{"text":" Arguments: ","color":"yellow","bold":true},{"text":"{","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     id","color":"aqua"},{"text":": "},{"text":"\"","color":"green"},{"text":"<identifier>","color":"dark_green"},{"text":"\"","color":"green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"     contents","color":"aqua"},{"text":": "},{"text":"{","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        lines","color":"aqua"},{"text":": "},{"text":"[","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           [","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<prefix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<suffix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           ]","color":"gold"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"           <every new list states a new line using the previous structure; lines are made from to bottom, up to 16 lines>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        ]","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     }","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"*","color":"green"},{"text":"]:","color":"gold"},{"text":" Use single quotes (') to avoid issues with escaping.","color":"gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"**","color":"green"},{"text":"]:","color":"gold"},{"text":" Optional; 1b if needs JSON component solving & 0b if doesn't need JSON component solving. Omission default to 0b.","color":"gray"},{"text":"\n "}]}}]]
execute if score if ca.sidebar matches 0 run

execute unless score entries.count ca.sidebar matches 12.. run tellraw @s [{"text":" ╞══ Found 11 lines...","color":"dark_gray"}]
execute unless score entries.count ca.sidebar matches 12.. run return 1

execute store result score if ca.sidebar if data storage ca: args.contents.lines[11][0].text
execute if score if ca.sidebar matches 0 run execute store success score if ca.sidebar run tellraw @s [[{"text":"[SU]: ","color":"#FFCA2A"}],{"text":"ARGUMENT ERROR: The twelfth element of Lines (list) argument is either empty, non-existent or malformed.","color":"#FFCA2A"}," ",[{"text":"Hover here to see the function arguments structure.","underlined":true,"color":"yellow","hoverEvent":{"action":"show_text","contents":["",{"text":"#","color":"dark_gray"},{"text":" Arguments: ","color":"yellow","bold":true},{"text":"{","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     id","color":"aqua"},{"text":": "},{"text":"\"","color":"green"},{"text":"<identifier>","color":"dark_green"},{"text":"\"","color":"green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"     contents","color":"aqua"},{"text":": "},{"text":"{","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        lines","color":"aqua"},{"text":": "},{"text":"[","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           [","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<prefix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<suffix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           ]","color":"gold"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"           <every new list states a new line using the previous structure; lines are made from to bottom, up to 16 lines>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        ]","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     }","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"*","color":"green"},{"text":"]:","color":"gold"},{"text":" Use single quotes (') to avoid issues with escaping.","color":"gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"**","color":"green"},{"text":"]:","color":"gold"},{"text":" Optional; 1b if needs JSON component solving & 0b if doesn't need JSON component solving. Omission default to 0b.","color":"gray"},{"text":"\n "}]}}]]
execute if score if ca.sidebar matches 0 run

execute unless score entries.count ca.sidebar matches 13.. run tellraw @s [{"text":" ╞══ Found 12 lines...","color":"dark_gray"}]
execute unless score entries.count ca.sidebar matches 13.. run return 1

execute store result score if ca.sidebar if data storage ca: args.contents.lines[12][0].text
execute if score if ca.sidebar matches 0 run execute store success score if ca.sidebar run tellraw @s [[{"text":"[SU]: ","color":"#FFCA2A"}],{"text":"ARGUMENT ERROR: The thirteenth element of Lines (list) argument is either empty, non-existent or malformed.","color":"#FFCA2A"}," ",[{"text":"Hover here to see the function arguments structure.","underlined":true,"color":"yellow","hoverEvent":{"action":"show_text","contents":["",{"text":"#","color":"dark_gray"},{"text":" Arguments: ","color":"yellow","bold":true},{"text":"{","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     id","color":"aqua"},{"text":": "},{"text":"\"","color":"green"},{"text":"<identifier>","color":"dark_green"},{"text":"\"","color":"green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"     contents","color":"aqua"},{"text":": "},{"text":"{","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        lines","color":"aqua"},{"text":": "},{"text":"[","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           [","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<prefix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<suffix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           ]","color":"gold"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"           <every new list states a new line using the previous structure; lines are made from to bottom, up to 16 lines>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        ]","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     }","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"*","color":"green"},{"text":"]:","color":"gold"},{"text":" Use single quotes (') to avoid issues with escaping.","color":"gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"**","color":"green"},{"text":"]:","color":"gold"},{"text":" Optional; 1b if needs JSON component solving & 0b if doesn't need JSON component solving. Omission default to 0b.","color":"gray"},{"text":"\n "}]}}]]
execute if score if ca.sidebar matches 0 run

execute unless score entries.count ca.sidebar matches 14.. run tellraw @s [{"text":" ╞══ Found 13 lines...","color":"dark_gray"}]
execute unless score entries.count ca.sidebar matches 14.. run return 1

execute store result score if ca.sidebar if data storage ca: args.contents.lines[13][0].text
execute if score if ca.sidebar matches 0 run execute store success score if ca.sidebar run tellraw @s [[{"text":"[SU]: ","color":"#FFCA2A"}],{"text":"ARGUMENT ERROR: The fourteenth element of Lines (list) argument is either empty, non-existent or malformed.","color":"#FFCA2A"}," ",[{"text":"Hover here to see the function arguments structure.","underlined":true,"color":"yellow","hoverEvent":{"action":"show_text","contents":["",{"text":"#","color":"dark_gray"},{"text":" Arguments: ","color":"yellow","bold":true},{"text":"{","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     id","color":"aqua"},{"text":": "},{"text":"\"","color":"green"},{"text":"<identifier>","color":"dark_green"},{"text":"\"","color":"green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"     contents","color":"aqua"},{"text":": "},{"text":"{","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        lines","color":"aqua"},{"text":": "},{"text":"[","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           [","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<prefix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<suffix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           ]","color":"gold"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"           <every new list states a new line using the previous structure; lines are made from to bottom, up to 16 lines>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        ]","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     }","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"*","color":"green"},{"text":"]:","color":"gold"},{"text":" Use single quotes (') to avoid issues with escaping.","color":"gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"**","color":"green"},{"text":"]:","color":"gold"},{"text":" Optional; 1b if needs JSON component solving & 0b if doesn't need JSON component solving. Omission default to 0b.","color":"gray"},{"text":"\n "}]}}]]
execute if score if ca.sidebar matches 0 run

execute unless score entries.count ca.sidebar matches 15.. run tellraw @s [{"text":" ╞══ Found 14 lines...","color":"dark_gray"}]
execute unless score entries.count ca.sidebar matches 15.. run return 1

execute store result score if ca.sidebar if data storage ca: args.contents.lines[14][0].text
execute if score if ca.sidebar matches 0 run execute store success score if ca.sidebar run tellraw @s [[{"text":"[SU]: ","color":"#FFCA2A"}],{"text":"ARGUMENT ERROR: The fifteenth element of Lines (list) argument is either empty, non-existent or malformed.","color":"#FFCA2A"}," ",[{"text":"Hover here to see the function arguments structure.","underlined":true,"color":"yellow","hoverEvent":{"action":"show_text","contents":["",{"text":"#","color":"dark_gray"},{"text":" Arguments: ","color":"yellow","bold":true},{"text":"{","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     id","color":"aqua"},{"text":": "},{"text":"\"","color":"green"},{"text":"<identifier>","color":"dark_green"},{"text":"\"","color":"green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"     contents","color":"aqua"},{"text":": "},{"text":"{","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        lines","color":"aqua"},{"text":": "},{"text":"[","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           [","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<prefix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<suffix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           ]","color":"gold"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"           <every new list states a new line using the previous structure; lines are made from to bottom, up to 16 lines>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        ]","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     }","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"*","color":"green"},{"text":"]:","color":"gold"},{"text":" Use single quotes (') to avoid issues with escaping.","color":"gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"**","color":"green"},{"text":"]:","color":"gold"},{"text":" Optional; 1b if needs JSON component solving & 0b if doesn't need JSON component solving. Omission default to 0b.","color":"gray"},{"text":"\n "}]}}]]
execute if score if ca.sidebar matches 0 run

execute unless score entries.count ca.sidebar matches 16.. run tellraw @s [{"text":" ╞══ Found 15 lines...","color":"dark_gray"}]
execute unless score entries.count ca.sidebar matches 16.. run return 1

execute store result score if ca.sidebar if data storage ca: args.contents.lines[15][0].text
execute if score if ca.sidebar matches 0 run execute store success score if ca.sidebar run tellraw @s [[{"text":"[SU]: ","color":"#FFCA2A"}],{"text":"ARGUMENT ERROR: The sixteenth element of Lines (list) argument is either empty, non-existent or malformed.","color":"#FFCA2A"}," ",[{"text":"Hover here to see the function arguments structure.","underlined":true,"color":"yellow","hoverEvent":{"action":"show_text","contents":["",{"text":"#","color":"dark_gray"},{"text":" Arguments: ","color":"yellow","bold":true},{"text":"{","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     id","color":"aqua"},{"text":": "},{"text":"\"","color":"green"},{"text":"<identifier>","color":"dark_green"},{"text":"\"","color":"green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"     contents","color":"aqua"},{"text":": "},{"text":"{","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        lines","color":"aqua"},{"text":": "},{"text":"[","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           [","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<prefix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              {","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"               *","color":"green"},{"text":" text","color":"aqua"},{"text":": "},{"text":"<suffix; JSON text string>","color":"dark_green"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"              **","color":"green"},{"text":" complex","color":"aqua"},{"text":": "},{"text":"<byte>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"              }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"           ]","color":"gold"},{"text":",\n"},{"text":"#","color":"dark_gray"},{"text":"           <every new list states a new line using the previous structure; lines are made from to bottom, up to 16 lines>","color":"dark_green"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"        ]","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"     }","color":"gold"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" }","color":"yellow"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"*","color":"green"},{"text":"]:","color":"gold"},{"text":" Use single quotes (') to avoid issues with escaping.","color":"gray"},{"text":"\n"},{"text":"#","color":"dark_gray"},{"text":" [","color":"gold"},{"text":"**","color":"green"},{"text":"]:","color":"gold"},{"text":" Optional; 1b if needs JSON component solving & 0b if doesn't need JSON component solving. Omission default to 0b.","color":"gray"},{"text":"\n "}]}}]]
execute if score if ca.sidebar matches 0 run

execute unless score entries.count ca.sidebar matches 17.. run tellraw @s [{"text":" ╞══ Found 16 lines...","color":"dark_gray"}]
execute unless score entries.count ca.sidebar matches 17.. run return 1

tellraw @s [{"text":" ╞══ ","color":"dark_gray"},{"text":"[!] Found more than 16 lines, ignoring extra lines...","color":"#FFCA2A"}]

return 0
